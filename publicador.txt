import http.client
import paho.mqtt.client as mqttclient
import time
import json
import threading
import numpy as np
minuto = 10
connected = False
broker_address = "c0b2d8757bde488aab72fca3dba31471.s1.eu.hivemq.cloud"
port = 8883
user = "usuario"
password = "Adminl02"

def temperatura_nevera():
    global client
    while True:
        datos = np.random.normal(10, 2)
        while not 8<=datos<=12:
            datos = np.random.normal(10, 2)
        hielo = np.random.uniform(0,10)
        client.publish("cocina/nevera",json.dumps([datos,hielo]))
        print("cocina/nevera "+ str(datos))
        time.sleep(minuto*5)

def temperatura_olla():
    global client
    while True:
        datos = np.random.uniform(0,150)
        client.publish("cocina/olla",datos)
        print("cocina/olla "+str(datos))
        if datos>=100:
            client.publish("alerta",json.dumps(["cocina/olla","El agua ya hirvió"]))
            print("cocina/olla El agua ya hirvió")
        time.sleep(10)

def contador_personas():
    global client
    while True:
        datos = np.random.uniform(0,10)
        personas = round(datos)
        client.publish("sala/contador", personas)
        print("sala/contador "+ str(personas))
        if datos>5:
            client.publish("alerta", json.dumps(["sala/contador","muchas personas en la sala"]))
            print("sala/contador alerta: muchas personas en la sala")
        time.sleep(minuto*1)

def alexa_echo():
    while True:
        conn = http.client.HTTPSConnection("community-open-weather-map.p.rapidapi.com")
        headers = {
            'x-rapidapi-key': "3bc6046a09msh2992c4f701eda53p17c423jsn282628d26de2",
            'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com"
        }

        conn.request("GET", "/find?q=caracas&mode=null&lon=0&type=link%2C%20accurate&lat=0&units=metric", headers=headers)

        res = conn.getresponse()
        jsonString = res.read().decode("utf-8")
        data = json.loads(jsonString)
        temperatura = data["list"][0]["main"]["temp"]
        client.publish("sala/alexa", temperatura)
        print("sala/alexa " +str(temperatura))
        time.sleep(minuto*5)

def tanque():
    capacidad = 100
    cont = 0
    while True:
        disminucion = np.random.normal(10, 5)
        while not 0<=disminucion<=100:
            disminucion = np.random.normal(10, 5)
        capacidad -= capacidad*disminucion/100
        capacidad = max(capacidad,0)
        cont = (cont+1)%3
        if cont == 0:
            llenado = np.random.normal(20, 5)
            while not 0<=llenado<=100:
                llenado = np.random.normal(20, 5)
            capacidad += capacidad*llenado/100
            capacidad = min(100, capacidad)

        client.publish("bano/tanque", capacidad)
        print("bano/tanque "+str(capacidad))
        if capacidad == 0:
            client.publish("alerta", json.dumps(["bano/tanque","no hay agua en el tanque"]))
            print("bano/tanque no hay agua en el tanque")
        elif capacidad<=50:
            client.publish("alerta", json.dumps(["bano/tanque","el tanque tiene poca agua"]))
            print("bano/tanque el tanque tiene poca agua")
        time.sleep(minuto*10)

def on_connect(client, usedata, flags, rc):
    if rc==0:
        print("cliente conectado")
        global connected
        connected = True
    else:
        print("conexión fallo")
client = mqttclient.Client("Publicador")
client.tls_set(tls_version=mqttclient.ssl.PROTOCOL_TLS)
client.username_pw_set(user, password=password)
client.on_connect = on_connect
client.connect(broker_address,port=port)
hilo_nevera = threading.Thread(target=temperatura_nevera)
#hilo_hielo = threading.Thread(target=generar_hielo)
hilo_olla = threading.Thread(target=temperatura_olla)
hilo_personas = threading.Thread(target=contador_personas)
hilo_alexa = threading.Thread(target=alexa_echo)
hilo_tanque = threading.Thread(target=tanque)
client.loop_start()
while not connected:
    time.sleep(0.2)
hilo_nevera.start()
#hilo_hielo.start()
hilo_olla.start()
hilo_personas.start()
hilo_alexa.start()
hilo_tanque.start()
client.loop_stop()
